package handlers

import (
	"go-skeleton/internal/application/domain/{{domainCamelCase}}"
	"go-skeleton/internal/application/providers/pagination"
	{{domainCamelCase}}Create "go-skeleton/internal/application/services/{{domainCamelCase}}/CREATE"
	{{domainCamelCase}}Delete "go-skeleton/internal/application/services/{{domainCamelCase}}/DELETE"
	{{domainCamelCase}}Edit "go-skeleton/internal/application/services/{{domainCamelCase}}/EDIT"
	{{domainCamelCase}}Get "go-skeleton/internal/application/services/{{domainCamelCase}}/GET"
	{{domainCamelCase}}List "go-skeleton/internal/application/services/{{domainCamelCase}}/LIST"
	{{domainCamelCase}}Repository "go-skeleton/internal/repositories/{{domainCamelCase}}"
	"go-skeleton/pkg/idCreator"
	"go-skeleton/pkg/logger"
	"go-skeleton/pkg/registry"
	"go-skeleton/pkg/validator"
	"net/http"

	"github.com/labstack/echo/v4"
)

type {{domainPascalCase}}Handlers struct {
	{{domainPascalCase}}Repository *{{domainCamelCase}}Repository.{{domainPascalCase}}Repository

	logger    logger.ILogger
	idCreator *idCreator.IdCreator
	validator *validator.Validator
}

func New{{domainPascalCase}}Handlers(reg *registry.Registry) *{{domainPascalCase}}Handlers {
	return &{{domainPascalCase}}Handlers{
		{{domainPascalCase}}Repository: reg.Inject("{{domainCamelCase}}Repository").(*{{domainCamelCase}}Repository.{{domainPascalCase}}Repository),
		logger:          reg.Inject("logger").(logger.ILogger),
		idCreator:       reg.Inject("idCreator").(*idCreator.IdCreator),
		validator:       reg.Inject("validator").(*validator.Validator),
	}
}

func (hs *{{domainPascalCase}}Handlers) HandleGet{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Get.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Get.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(422, errors)
	}

	s.Execute(
		{{domainCamelCase}}Get.NewRequest(data),
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleCreate{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Create.NewService(hs.logger, hs.{{domainPascalCase}}Repository, hs.idCreator)
	data := new({{domainCamelCase}}Create.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(http.StatusBadRequest, errors)
	}

	s.Execute(
		{{domainCamelCase}}Create.NewRequest(data, hs.validator),
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusCreated, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleEdit{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Edit.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Edit.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(http.StatusBadRequest, errors)
	}

	s.Execute(
		{{domainCamelCase}}Edit.NewRequest(data, hs.validator),
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleList{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}List.NewService(
		hs.logger,
		hs.{{domainPascalCase}}Repository,
		pagination.NewPaginationProvider[{{domainCamelCase}}.{{domainPascalCase}}](hs.{{domainPascalCase}}Repository),
	)

	data := new({{domainCamelCase}}List.Data)
	bindErr := echo.QueryParamsBinder(context).
		Int("page", &data.Page).
		BindErrors()

	if bindErr != nil {
		return context.JSON(http.StatusBadRequest, bindErr)
	}

	s.Execute(
		{{domainCamelCase}}List.NewRequest(data),
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}

func (hs *{{domainPascalCase}}Handlers) HandleDelete{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Delete.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Delete.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(http.StatusBadRequest, errors)
	}

	s.Execute(
		{{domainCamelCase}}Delete.NewRequest(data),
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}
