// Code generated by ent, DO NOT EDIT.

package cart

import (
	"go-skeleton/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Cart {
	return predicate.Cart(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Cart {
	return predicate.Cart(sql.FieldContainsFold(FieldID, id))
}

// ModifiedAt applies equality check predicate on the "ModifiedAt" field. It's identical to ModifiedAtEQ.
func ModifiedAt(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldModifiedAt, v))
}

// ModifiedAtEQ applies the EQ predicate on the "ModifiedAt" field.
func ModifiedAtEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldModifiedAt, v))
}

// ModifiedAtNEQ applies the NEQ predicate on the "ModifiedAt" field.
func ModifiedAtNEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldModifiedAt, v))
}

// ModifiedAtIn applies the In predicate on the "ModifiedAt" field.
func ModifiedAtIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldModifiedAt, vs...))
}

// ModifiedAtNotIn applies the NotIn predicate on the "ModifiedAt" field.
func ModifiedAtNotIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldModifiedAt, vs...))
}

// ModifiedAtGT applies the GT predicate on the "ModifiedAt" field.
func ModifiedAtGT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldModifiedAt, v))
}

// ModifiedAtGTE applies the GTE predicate on the "ModifiedAt" field.
func ModifiedAtGTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldModifiedAt, v))
}

// ModifiedAtLT applies the LT predicate on the "ModifiedAt" field.
func ModifiedAtLT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldModifiedAt, v))
}

// ModifiedAtLTE applies the LTE predicate on the "ModifiedAt" field.
func ModifiedAtLTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldModifiedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.NotPredicates(p))
}
